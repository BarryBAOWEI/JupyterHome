variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(5,9,10,13)]),
distribution.model = "norm")
sgarch_test10 = ugarchfit(data=sample[,1], spec = spec10,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test10
#### 二六效应-norm
spec10 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(5,9)]),
distribution.model = "norm")
sgarch_test10 = ugarchfit(data=sample[,1], spec = spec10,
solver = "hybrid", realizedVol = sample[,3])
#### 二六效应-norm
spec11 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(5,9)]),
distribution.model = "norm")
sgarch_test11 = ugarchfit(data=sample[,1], spec = spec11,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test11
plot(sgarch_test11)
#### 二六效应-ged
spec12 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(5,9)]),
distribution.model = "ged")
sgarch_test12 = ugarchfit(data=sample[,1], spec = spec12,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test12
plot(sgarch_test12)
#### 二六效应-std
spec13 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(5,9)]),
distribution.model = "std")
sgarch_test13 = ugarchfit(data=sample[,1], spec = spec13,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test13
plot(sgarch_test13)
library(rugarch)
library(xts)
data<-read.zoo('C:/Users/jxjsj/Desktop/JupyterHome/Data/SZZS_lnr_rv_w_m_ntd_080101-181101.csv',header=TRUE,sep=',')
sample <- xts(x = data)
View(sample)
View(sample)
#######################################################
sample[,c(22)]
#######################################################
sample[,c(21)]
#######################################################
sample[,c(23)]
#### 假日效应-norm
spec14 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[,c(23)]),
distribution.model = "norm")
sgarch_test14 = ugarchfit(data=sample[,1], spec = spec14,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test14
#### 假日效应-norm-置于波动率方程
spec15 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1), external.regressors = sample[,c(23)]),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm")
sgarch_test15 = ugarchfit(data=sample[,1], spec = spec15,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test15
plot(sgarch_test15)
plot(sgarch_test15)
library(FinTS)
install.packages("FinTS")
install.packages('devtools')
library(devtools)
install_github("cran/FinTS")
library(FinTS)
#######################################################
ArchTest(sqmple[,1],lag=12)
#######################################################
ArchTest(sample[,1],lag=12)
#######################################################
ArchTest(sample[,2],lag=12)
#######################################################
ArchTest(sample[,1],lag=12)
Box.test((sample[,1]-mean(sample[,1]))^2,lag=12, type='Ljung')
Box.test((sample[,1]-mean(sample[,1])),lag=12, type='Ljung')
Box.test((sample[,1]-mean(sample[,1])),lag=8, type='Ljung')
Box.test((sample[,1]-mean(sample[,1])),lag=6, type='Ljung')
Box.test(sample[,1],lag=6, type='Ljung')
# Ljung-Box检验，原假设序列的前n各自相关函数联合为0
Box.test((sample[,1]-mean(sample[,1]))^2,lag=12, type='Ljung')
# Ljung-Box检验，原假设序列的前n各自相关函数联合为0
Box.test((sample[,1])^2,lag=12, type='Ljung')
Box.test(sample[,1],lag=4, type='Ljung')
Box.test(sample[,1],lag=3, type='Ljung')
#
garch_at15 = sgarch_test15@fit[["residuals"]]
garch_sigma15 = sgarch_test15@fit[["sigma"]]
stdd.residuals15 = garch_at15/garch_sigma15
ArchTest(stdd.residuals15,lag=12)
Box.test(stdd.residuals15,lag=12, type='Ljung')
Box.test(stdd.residuals15^2,lag=12, type='Ljung')
summary(garch_at15)
summary(sgarch_test15)
library(rugarch)
library(xts)
library(FinTS)
data<-read.zoo('C:/Users/jxjsj/Desktop/JupyterHome/Data/SZZS_lnr_rv_w_m_ntd_080101-181101.csv',header=TRUE,sep=',')
sample <- xts(x = data)
########################乱七八糟##########################
sample[100:,c(23)]
########################乱七八糟##########################
sample[,c(23)]
########################乱七八糟##########################
sample[400:2635,c(23)]
########################乱七八糟##########################
sample[450:2635,c(23)]
########################乱七八糟##########################
sample[480:2635,c(23)]
########################乱七八糟##########################
sample[489:2635,c(23)]
########################乱七八糟##########################
sample[489:1600,c(23)]
########################乱七八糟##########################
sample[489:1800,c(23)]
########################乱七八糟##########################
sample[1700:1800,c(23)]
########################乱七八糟##########################
sample[1700:1730,c(23)]
########################乱七八糟##########################
sample[1700:1705,c(23)]
########################乱七八糟##########################
sample[1660:1705,c(23)]
########################乱七八糟##########################
sample[2014-11-04:2014-11-06,c(23)]
########################乱七八糟##########################
sample['2014-11-04':'2014-11-06',c(23)]
########################乱七八糟##########################
sample[1560:1580,c(23)]
########################乱七八糟##########################
sample[1660:1680,c(23)]
########################乱七八糟##########################
sample[1655:1680,c(23)]
########################乱七八糟##########################
sample[1855:1880,c(23)]
########################乱七八糟##########################
sample[1955:1980,c(23)]
########################乱七八糟##########################
sample[1990:1999,c(23)]
########################乱七八糟##########################
sample[1990:2010,c(23)]
########################乱七八糟##########################
sample[1950:1980,c(23)]
########################乱七八糟##########################
sample[1950:1990,c(23)]
########################乱七八糟##########################
sample[1966:2635,c(23)]
#### 周内效应-norm
spec1 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample[489:1701,c(16,17,19,20)]),
distribution.model = "norm")
sgarch_test1 = ugarchfit(data=sample[,1], spec = spec1,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test1 = ugarchfit(data=sample[489:1701,1], spec = spec1,
solver = "hybrid", realizedVol = sample[,3])
sgarch_test1 = ugarchfit(data=sample[489:1701,1], spec = spec1,
solver = "hybrid", realizedVol = sample[[489:1701,1],3])
sgarch_test1 = ugarchfit(data=sample[489:1701,1], spec = spec1,
solver = "hybrid", realizedVol = sample[489:1701,3])
sgarch_test1
## 样本时间段调整
## 2010.01初-2014.12末[489:1701],
## 2014.11初-2016.03末[1659:2004],
## 2016.02初-2018.11初*[1966:2635].
sample.test = sample[489:1701,]
#### 周内效应-norm
spec1 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "norm")
sgarch_test1 = ugarchfit(data=sample.test[,1], spec = spec1,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test1
#### 周内效应-ged
spec2 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "ged")
sgarch_test2 = ugarchfit(data=sample.test[,1], spec = spec2,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test2
#### 周内效应-std
spec4 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "std")
sgarch_test4 = ugarchfit(data=sample.test[,1], spec = spec4,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test4
########################各类检验##########################
# arch效应检验,yt = u + at, at = yt - u, 对{at^2}序列计算LM统计量, 原假设对滞后项回归系数联合为0
ArchTest(sample.test[,1],lag=12)
# Ljung-Box检验，原假设序列的前n各自相关函数联合为0
Box.test((sample.test[,1]-mean(sample.test[,1]))^2,lag=12, type='Ljung')
Box.test(sample.test[,1],lag=3, type='Ljung')
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at4 = sgarch_test4@fit[["residuals"]]
garch_sigma4 = sgarch_test4@fit[["sigma"]]
stdd.residuals4 = garch_at4/garch_sigma4
ArchTest(stdd.residuals4,lag=12)                    # LM统计量
Box.test(stdd.residuals4,lag=12, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals4^2,lag=12, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at1 = sgarch_test1@fit[["residuals"]]
garch_sigma1 = sgarch_test1@fit[["sigma"]]
stdd.residuals1 = garch_at1/garch_sigma1
ArchTest(stdd.residuals1,lag=12)                    # LM统计量
Box.test(stdd.residuals1,lag=12, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals1^2,lag=12, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
#### 周五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
plot(sgarch_test3)
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19.20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at3 = sgarch_test3@fit[["residuals"]]
garch_sigma3 = sgarch_test3@fit[["sigma"]]
stdd.residuals3 = garch_at3/garch_sigma3
ArchTest(stdd.residuals3,lag=12)                    # LM统计量
Box.test(stdd.residuals3,lag=12, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=12, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
ArchTest(stdd.residuals3,lag=7)                    # LM统计量
Box.test(stdd.residuals3,lag=7, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=7, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,2)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at3 = sgarch_test3@fit[["residuals"]]
garch_sigma3 = sgarch_test3@fit[["sigma"]]
stdd.residuals3 = garch_at3/garch_sigma3
ArchTest(stdd.residuals3,lag=7)                    # LM统计量
Box.test(stdd.residuals3,lag=7, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=7, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(3,3)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at3 = sgarch_test3@fit[["residuals"]]
garch_sigma3 = sgarch_test3@fit[["sigma"]]
stdd.residuals3 = garch_at3/garch_sigma3
ArchTest(stdd.residuals3,lag=7)                    # LM统计量
Box.test(stdd.residuals3,lag=7, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=7, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
########################各类检验##########################
#  对数收益率序列的弱平稳性检验
adfTest(sample.test[,1], lags = 1, type =c("nc"), title = NULL, description =NULL) # type =c("nc", "c", "ct")
library(fUnitRoots)
install.packages('fUnitRoots')
library(fUnitRoots)
########################各类检验##########################
#  对数收益率序列的弱平稳性检验
adfTest(sample.test[,1], lags = 1, type =c("nc"), title = NULL, description =NULL) # type =c("nc", "c", "ct")
########################各类检验##########################
#  对数收益率序列的弱平稳性检验
adfTest(sample.test[,1], lags = 1, type =c("c"), title = NULL, description =NULL) # type =c("nc", "c", "ct")
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at3 = sgarch_test3@fit[["residuals"]]
garch_sigma3 = sgarch_test3@fit[["sigma"]]
stdd.residuals3 = garch_at3/garch_sigma3
ArchTest(stdd.residuals3,lag=7)                    # LM统计量
Box.test(stdd.residuals3,lag=7, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=7, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
ArchTest(stdd.residuals3,lag=5)                    # LM统计量
Box.test(stdd.residuals3,lag=5, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=5, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
plot(sgarch_test1)
,
ArchTest(stdd.residuals3,lag=3)                    # LM统计量
Box.test(stdd.residuals3,lag=3, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=3, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
#### 周四、五效应-norm
spec3 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "norm")
sgarch_test3 = ugarchfit(data=sample.test[,1], spec = spec3,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
# 标准化残差的arch效应检验LM统计量与Ljung-Box统计量
garch_at3 = sgarch_test3@fit[["residuals"]]
garch_sigma3 = sgarch_test3@fit[["sigma"]]
stdd.residuals3 = garch_at3/garch_sigma3
ArchTest(stdd.residuals3,lag=3)                    # LM统计量
Box.test(stdd.residuals3,lag=3, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=3, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
a
ArchTest(stdd.residuals3,lag=7)                    # LM统计量
Box.test(stdd.residuals3,lag=7, type='Ljung')      # Ljung-Box统计量,标准残差的自相关,收益率方程建模充分
Box.test(stdd.residuals3^2,lag=7, type='Ljung')    # Ljung-Box统计量,标准残差平方的自相关,波动率方程建模充分
#### 周四、五效应-ged
spec5 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "ged")
sgarch_test5 = ugarchfit(data=sample.test[,1], spec = spec5,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test3
#### 周四、五效应-ged
spec5 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(19,20)]),
distribution.model = "ged")
sgarch_test5 = ugarchfit(data=sample.test[,1], spec = spec5,
solver = "hybrid", realizedVol = sample.test[,3])
sgarch_test5
install.packages('fitdistrplus')
library(fitdistrplus)
# 寻找对数收益率序列最合适的分布
fitdist(sample.test[,1], 'norm', method = c("mle"),
start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...)
# 寻找对数收益率序列最合适的分布
fitdist(sample.test[,1], 'norm', method = c("mle")) # start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...
# 寻找对数收益率序列最合适的分布
fitdist(c(sample.test[,1]), 'norm', method = c("mle")) # start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...
# 寻找对数收益率序列最合适的分布
fitdist(c(1,2,3,4,5,6), 'norm', method = c("mle")) # start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...
# 寻找对数收益率序列最合适的分布
fitdist(as.vector(sample.test[,1]), 'norm', method = c("mle")) # start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...
# 广义误差分布
fitdist(as.vector(sample.test[,1]), 'ged', method = c("mle"))
# 广义误差分布
fitdist(as.vector(sample.test[,1]), 'std', method = c("mle"))
# 广义误差分布
fitdist(as.vector(sample.test[,1]), 'rt', method = c("mle"))
# 广义误差分布
fitdist(as.vector(sample.test[,1]), rt, method = c("mle"))
# 广义误差分布
fitdist(as.vector(sample.test[,1]), rt(), method = c("mle"))
# 广义误差分布
fitdist(as.vector(sample.test[,1]), drt, method = c("mle"))
# 广义误差分布
drt = drt(100,1)
# 广义误差分布
ks.test(as.vector(sample.test[,1]), 'pnorm')
# 广义误差分布
ks.test(as.vector(sample.test[,1]), 'pexp')
# 广义误差分布
ks.test(as.vector(sample.test[,1]), 'prt')
# 广义误差分布
ks.test(as.vector(sample.test[,1]), 'pt')
# 广义误差分布
ks.test(as.vector(sample.test[,1]), pt(,2))
# 广义误差分布
ks.test(as.vector(sample.test[,1]), pt(1,2))
# 广义误差分布
ks.test(as.vector(sample.test[,1]), pt(length(as.vector(sample.test[,1])),2))
ks.test(as.vector(sample.test[,1]), 'pnorm')
ks.test(as.vector(sample.test[,1]), pged)
ks.test(as.vector(sample.test[,1]), pged())
ks.test(as.vector(sample.test[,1]), qged())
ks.test(as.vector(sample.test[,1]), rged())
ks.test(as.vector(sample.test[,1]), prged())
rged(n=100)
# 寻找对数收益率序列最合适的分布
# # 正态分布
# fitdist(as.vector(sample.test[,1]), 'norm', method = c("mle")) # start=NULL, fix.arg=NULL, discrete=FALSE, keepdata = TRUE, keepdata.nb=100, ...
# ks.test(as.vector(sample.test[,1]), 'pnorm')
# # 广义误差分布
# ks.test(as.vector(sample.test[,1]), pt(length(as.vector(sample.test[,1])),2))
# ks.test(as.vector(sample.test[,1]), pged())
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test3@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2],var1=garch_sigma))
RV_sigma = data.frame(y=as.vector(sample.test[,2],var1=as.vector(garch_sigma)))
garch_sigma
garch_sigma[,1]
c(garch_sigma)
RV_sigma = data.frame(y=as.vector(sample.test[,2],var1=c(garch_sigma)))
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
model = lm(y~1+var1,data=RV_sigma)
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
#### 周内效应-norm
spec1 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "norm")
sgarch_test1 = ugarchfit(data=sample.test[,1], spec = spec1,
solver = "hybrid", realizedVol = sample.test[,3])
#### 周内效应-ged
spec2 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "ged")
sgarch_test2 = ugarchfit(data=sample.test[,1], spec = spec2,
solver = "hybrid", realizedVol = sample.test[,3])
#### 周内效应-std
spec4 = ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(2,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE, external.regressors = sample.test[,c(16,17,19,20)]),
distribution.model = "std")
sgarch_test4 = ugarchfit(data=sample.test[,1], spec = spec4,
solver = "hybrid", realizedVol = sample.test[,3])
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test1@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test2@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test3@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test4@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
(RV_sigma-garch_sigma)^2
(as.vector(sample.test[,2])-garch_sigma)^2
sum((as.vector(sample.test[,2])-garch_sigma)^2)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test1@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 已实现波动与预测波动的均方误差
sum((as.vector(sample.test[,2])-garch_sigma)^2)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test2@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 已实现波动与预测波动的均方误差
sum((as.vector(sample.test[,2])-garch_sigma)^2)
# 寻找对数收益率序列最合适的分布-2
# 已实现波动与预测波动的回归分析比较
garch_sigma = sgarch_test4@fit[["sigma"]]^2
RV_sigma = data.frame(y=as.vector(sample.test[,2]),
var1=c(garch_sigma))
lm.RV_sigma_test = lm(y~1+var1,data=RV_sigma)
summary(lm.RV_sigma_test)
# 已实现波动与预测波动的均方误差
sum((as.vector(sample.test[,2])-garch_sigma)^2)
# arch效应检验,yt = u + at, at = yt - u, 对{at^2}序列计算LM统计量, 原假设对滞后项回归系数联合为0
ArchTest(sample.test[,1],lag=12)
